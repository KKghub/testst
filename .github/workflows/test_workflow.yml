name: Test Workflow

on:
  pull_request:
  workflow_dispatch:
    inputs:
      test-case:
        description: 'Test Cases To Run'
        required: true
        default: all

env:
  GLOBAL_VAR: 7

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Setup matrix combinations
        id: set-matrix
        run: |
          MATRIX_TEST_CASE_ALL=$(jq -c --null-input \
          '[
            "case-1",
            "case-2"
          ]')
          echo "::Available Test Cases::"
          echo $MATRIX_TEST_CASE_ALL

          # if input test case is empty or not provided,
          # we set "all" as default
          INPUT_TEST_CASE="${{ github.event.inputs.test-case }}"
          echo "Input Test Case: \"${INPUT_TEST_CASE:=all}\""

          if [[ $INPUT_TEST_CASE == "all" ]]; then
            echo "Using the matrix: $MATRIX_TEST_CASE_ALL"
            echo "::set-output name=matrix::$MATRIX_TEST_CASE_ALL"
          else
            MATRIX_TEST_CASE=[]
            for TEST_CASE in $(echo $INPUT_TEST_CASE | sed "s/,/ /g")
            do
              IS_TEST_CASE_EXIST=$(echo $MATRIX_TEST_CASE_ALL | jq -c --arg test_case $TEST_CASE 'any(.[]; . == $test_case)')
              
              if [[ $IS_TEST_CASE_EXIST == "true" ]]; then
                MATRIX_TEST_CASE=$(echo $MATRIX_TEST_CASE | jq -c --arg test_case $TEST_CASE '. += [$test_case]')
              fi
            done

            if [[ $(echo $MATRIX_TEST_CASE | jq length) > 0 ]]; then
              echo "Using the matrix: $MATRIX_TEST_CASE"
              echo "::set-output name=matrix::$MATRIX_TEST_CASE"
            else
              echo "No Input Test Case is valid..."
              exit 1
            fi
          fi

  job-1:
    runs-on: ubuntu-latest
    needs: setup-matrix
    strategy:
      fail-fast: false
      matrix:
        test-case: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
    env:
      BOX_TYPE: cozy
      TEST_NAME: test-case
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v2
      - name: Set Output
        id: step-1
        run: |
          echo "${{ toJSON(needs.setup-matrix.outputs.matrix) }}"
          echo "${{ matrix.${{ env.TEST_NAME }} }}"
          if [[ ${{ matrix.test-case }} == "case-1" ]]; then
            EMU=$(echo -e "abc\nxyz")
            for i in $EMU; do
              echo $i
            done

            exit 0
          else
            exit 0
          fi
      - name: Check Status of step-1
        if: always()
        run: |
          echo "step-1 Status: ${{ steps.step-1.outcome }}"

  job-2:
    runs-on: ubuntu-latest
    needs: job-1
    if: always()
    steps:
      - name: command test
        run: |
          echo $BOX_TYPE
          echo ${{ env.BOX_TYPE }}
          echo ${{ matrix.x }}
          echo ${{ matrix.y }}
          echo ${{ env.GLOBAL_VAR }}
          echo ${{ needs.job-1.result }}
          pwd
          ls -al